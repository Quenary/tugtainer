name: Semantic Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  # frontend-tests:
  #   name: Run Frontend Tests
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: ./frontend

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20

  #     - name: Install frontend dependencies
  #       run: npm ci

  #     - name: Run tests
  #       run: npm run test:ci

  # backend-tests:
  #   name: Run Backend Tests
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       working-directory: ./backend

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.11

  #     - name: Install backend dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Run pytest
  #       run: pytest

  release:
    name: Run Semantic Release
    runs-on: ubuntu-latest
    # needs:
    #   - frontend-tests
    #   - backend-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  check-tag:
    name: Check Docker Tag
    runs-on: ubuntu-latest
    needs: release
    outputs:
      version: ${{ steps.version.outputs.version }}
      exists: ${{ steps.check_tag.outputs.exists }}
    env:
      IMAGE_NAME: quenary/tugtainer

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF##*/}"
          else
            VERSION=$(git tag --sort=-creatordate | grep '^v[0-9]' | head -n 1)
          fi

          if [ -z "$VERSION" ]; then
            echo "❌ ERROR: No version tag found. Aborting."
            exit 1
          fi

          echo "✅ Using VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if Docker tag already exists
        id: check_tag
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/${{ steps.version.outputs.version }}/)
          echo "Status: $STATUS"
          if [ "$STATUS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: check-tag
    if: needs.check-tag.outputs.version != '' && needs.check-tag.outputs.exists == 'false'
    env:
      IMAGE_NAME: quenary/tugtainer
      VERSION: ${{ needs.check-tag.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Semantic-release pushes new tag and modifies some files
      - name: Fetch latest refs explicitly
        run: |
          git fetch origin main
          git fetch --tags
          git reset --hard origin/main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.IMAGE_NAME }}:latest
          build-args: |
            VERSION=${{ env.VERSION }}
          labels: |
            org.opencontainers.image.title=Tugtainer
            org.opencontainers.image.description="Containerized app for automating updates of docker containers"
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.VERSION }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.created=${{ github.run_started_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
